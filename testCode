import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TextField;
import javafx.scene.layout.*;
import javafx.scene.text.Text;
import javafx.stage.Stage;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class UI extends Application{
    private final ExecutorService executorService = Executors.newCachedThreadPool();


    @Override
    public void start(Stage primaryStage) throws Exception {
        BorderPane border = new BorderPane();
        StackPane root = new StackPane();
        /*
        HBox hbox = addHBox();
        border.setTop(hbox);
        border.setLeft(addVBox());
        */
        /*
        border.setCenter(addGridPane());
        border.setBottom(addGridPaneTwo());
        */
        root.getChildren().add(addVBox());

        Scene scene = new Scene(root, 1280, 900);

        primaryStage.setTitle("UI Test");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public VBox addVBox() {
        VBox vbox = new VBox();
        vbox.setPadding(new Insets(15, 12, 15, 12));
        vbox.setSpacing(0);

        vbox.getChildren().addAll(addGridPane(), addGridPaneTwo());

        return vbox;
    }

    //add by column then row
    public GridPane addGridPane() {
        GridPane grid = new GridPane();
        grid.setHgap(0);
        grid.setVgap(0);
        grid.setPadding(new Insets(0, 10, 0, 10));
        grid.setGridLinesVisible(true);

        TextField dailyHours = new TextField();
        grid.add(dailyHours, 1, 1);

        Text labelDailyHours = new Text("Number of Hours per Day");
        grid.add(labelDailyHours, 1, 0);

        Text labelDaysAWeek = new Text("Number of Days per week");
        grid.add(labelDaysAWeek, 2, 0);

        Text labelFunction = new Text("Click the Button to complete the calculation");
        grid.add(labelFunction, 3, 0);

        Text labelTotalHours = new Text("Number of hours per week");
        grid.add(labelTotalHours, 4, 0);

        Button multiply = new Button("multiply");
        grid.add(multiply, 3, 1);

        Text sleep = new Text("Sleep on average?");
        grid.add(sleep, 0, 1);

        Text work = new Text("Work on daily average?");
        grid.add(work, 0, 2);

        return grid;
    }

    public GridPane addGridPaneTwo() {
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(0, 10, 0, 10));
        grid.setGridLinesVisible(true);

        Text extra = new Text("extra stuff that you do");
        grid.add(extra, 0, 0);

        return grid;
    }


    /*
    private class secondUserStoryAction implements Runnable {
        @Override
        public void run() {
            secondUserStory.clear();
            String user = userName.getText();
            Instant timestamp = null;
            try {
                for (int i = 0; i < 10; i++) {
                    if (revisionList.get(i).user.equals(user)) {
                        timestamp = revisionList.get(i).timestamp;
                        break;
                    }
                }
                showSecondUserStory(user, timestamp);
            } catch (Exception exception) {
                secondUserStory.setText("There was an error and the program crashed. " +
                        "\nPlease ensure that the user you entered is a valid user \nand that you are connected " +
                        "to the internet.");
                enableLeftInput();
                enableRightInput();
            }
        }

        private void showSecondUserStory(String pageName, Instant timestamp) throws IOException, SAXException, ParserConfigurationException {
            String userUrl = factory.createUserUrl(pageName, timestamp);
            InputStream inputStream = connect.connectToUserUrl(userUrl);
            userList = parse.getUserPageRevisions(inputStream);
            for(Revision revision : userList) {
                secondUserStory.appendText(revision.printSecondUserStory() + "\n");
            }
            enableLeftInput();
            enableRightInput();
        }
    }
    */
}
